{"version":3,"sources":["Components/addQuoteComponent/addQuoteComponent.js","Components/randomQuoteComponent/randomQuoteComponent.js","Data/quotes.ts","Components/AllQuotes/AllQuotes.js","App.js","serviceWorker.js","index.js"],"names":["AddQuote","props","className","name","onSubmit","event","preventDefault","addQuoteToArray","handleQuote","handleAuthor","setQuote","quote","author","value","placeholder","initialFormState","onChange","type","DisplayQuote","useState","count","setCount","quoteArray","onClick","length","quotesFileArray","AllQuotes","tableData","quotesArray","map","el","key","App","setQuoteArray","content","addQuoteForm","target","listOfQuotes","exact","to","activeClassName","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.41a95e31.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./addQuoteComponent.css\";\n\nexport default function AddQuote(props) {\n  function submit(event) {\n    event.preventDefault();\n    props.addQuoteToArray(props.handleQuote, props.handleAuthor);\n    props.setQuote({ quote: \"\", author: \"\" });\n  }\n  return (\n    <div className=\"card-wrapper\">\n      <form className=\"card\" name=\"form\" onSubmit={submit}>\n        <textarea\n          value={props.quote.quote}\n          placeholder={props.initialFormState.quote}\n          name=\"quote\"\n          onChange={props.handleQuote}\n        ></textarea>\n        <input\n          value={props.quote.author}\n          placeholder={props.initialFormState.author}\n          name=\"authorName\"\n          onChange={props.handleAuthor}\n        ></input>\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./randomQuoteComponent.css\";\n\nexport default function DisplayQuote(props) {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div className=\"card-wrapper\">\n      <article className=\"card\">\n        <h2>Enjoy the quote:</h2>\n        <div className=\"quote\">\"{props.quoteArray[count].quote}\"</div>\n\n        <span className=\"author\">~{props.quoteArray[count].author}.</span>\n        <br />\n        <button\n          onClick={() => {\n            count + 1 < props.quoteArray.length\n              ? setCount(count + 1)\n              : setCount(0);\n          }}\n        >\n          Next Quote\n        </button>\n      </article>\n    </div>\n  );\n}\n","const quotesFileArray = [\n  {\n    quote:\n      \"As it now stands, this quote app does not save quotes between sessions. This is intentional. I hope you enjoy this mini portfolio piece.\",\n    author: \"Joshua Pearson\"\n  },\n  {\n    quote: \"The way to get started is to quit talking and begin doing\",\n    author: \"Walt Disney\"\n  },\n  {\n    quote:\n      \"The greatest glory in living lies not in never falling, but in rising every time we fall.\",\n    author: \"Nelson Mandela\"\n  },\n  {\n    quote:\n      \"There is an inexorable law of nature in operation which decrees that no man can act with the purpose of destroying anotherâ€™s freedom without losing his own.\",\n    author: \"H. Verlan Anderson\"\n  },\n  {\n    quote:\n      \"To compel a man to furnish funds for the propagation of ideas he disbelieves and abhors is sinful and tyrannical.\",\n    author: \"Thomas Jefferson\"\n  },\n  {\n    quote:\n      \"Arbitrary power is most easily established on the ruins of liberty abused to licentiousness\",\n    author: \"George Washington\"\n  }\n];\n\nexport default quotesFileArray;\n","import React from \"react\";\nimport \"./AllQuotes.css\";\n\nexport function AllQuotes(props) {\n  const tableData = props.quotesArray.map(el => (\n    <tr key={el.author}>\n      <td>{el.quote}</td>\n      <td>{el.author}</td>\n    </tr>\n  ));\n  return (\n    <div className=\"card-wrapper\">\n      <div className=\"card\">\n        <p>A table of all quotes currently in rotation:</p>\n        <table>\n          <thead>\n            <tr>\n              <th>Quote</th>\n              <th>Author</th>\n            </tr>\n          </thead>\n          <tbody>{tableData}</tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default AllQuotes;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport AddQuote from \"./Components/addQuoteComponent/addQuoteComponent\";\nimport DisplayQuote from \"./Components/randomQuoteComponent/randomQuoteComponent\";\nimport quotesFileArray from \"./Data/quotes.ts\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink\n} from \"react-router-dom\";\nimport AllQuotes from \"./Components/AllQuotes/AllQuotes\";\n\nfunction App() {\n  const [quote, setQuote] = useState({\n    quote: \"\",\n    author: \"\"\n  });\n\n  const initialFormState = {\n    quote: \"Enter your quote here\",\n    author: \"Author here\"\n  };\n\n  const [quoteArray, setQuoteArray] = useState([...quotesFileArray]);\n\n  function addQuoteToArray() {\n    setQuoteArray([...quoteArray, quote]);\n  }\n\n  function handleQuoteChange(event) {\n    setQuote({ quote: event.target.value, author: quote.author });\n  }\n\n  function handleAuthorChange(event) {\n    setQuote({ quote: quote.quote, author: event.target.value });\n  }\n\n  const content = <DisplayQuote quoteArray={quoteArray} />;\n  const addQuoteForm = (\n    <AddQuote\n      handleQuote={handleQuoteChange}\n      handleAuthor={handleAuthorChange}\n      addQuoteToArray={addQuoteToArray}\n      quote={quote}\n      initialFormState={initialFormState}\n      setQuote={setQuote}\n    />\n  );\n  const listOfQuotes = <AllQuotes quotesArray={quoteArray} />;\n\n  return (\n    <Router>\n      <nav className=\"topnav\">\n        <span>\n          <NavLink\n            exact={true}\n            to=\"/react-quote-gen/\"\n            activeClassName=\"is-active\"\n          >\n            Random Quotes\n          </NavLink>\n        </span>\n        <span>\n          <NavLink\n            exact={true}\n            to=\"/react-quote-gen/quotes-list\"\n            activeClassName=\"is-active\"\n          >\n            List of Quotes\n          </NavLink>\n        </span>\n      </nav>\n      <Switch>\n        <Route exact={true} path=\"/react-quote-gen/\">\n          {content} {addQuoteForm}\n        </Route>\n        <Route exact={true} path=\"/react-quote-gen/quotes-list\">\n          {listOfQuotes}\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}